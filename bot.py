# [–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–û–õ–ù–´–ô –ö–û–î –° –ü–û–î–î–ï–†–ñ–ö–û–ô WELCOME.TXT –ò WELCOME.JPG –ò–ó–ú–ï–ù–ï–ù–ò–ô]

import os
import datetime
import random
import requests
import pytz
from deep_translator import GoogleTranslator
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler, filters

user_subscriptions = {}
user_one_time = {}
user_one_time_express = {}
payment_requests = {}
purchase_history = {}

SUBSCRIPTIONS = {
    'week': 7,
    '2weeks': 14,
    'month': 30,
}

ODDS_API_KEY = os.getenv('ODDS_API_KEY', 'd0b434508c21688f0655d4eef265b4c5')
SPORT_KEY = 'soccer'
WELCOME_TEXT_FILE = 'welcome.txt'
WELCOME_IMAGE_FILE = 'welcome.jpg'

ADMIN_IDS = {553253995}

def translate_to_english(text):
    try:
        return GoogleTranslator(source='auto', target='en').translate(text)
    except Exception:
        return text

def get_odds_matches():
    matches = []
    tz = pytz.timezone('Europe/Kiev')
    now = datetime.datetime.now(tz)
    url = f'https://api.the-odds-api.com/v4/sports/{SPORT_KEY}/odds?apiKey={ODDS_API_KEY}&regions=eu&markets=h2h&oddsFormat=decimal'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            for m in response.json():
                home, away = m['home_team'], m['away_team']
                ct = datetime.datetime.fromisoformat(m['commence_time'].replace('Z', '+00:00'))
                ct_kiev = ct.astimezone(tz)
                if ct_kiev > now:
                    matches.append(f"{home} vs {away} –≤ {ct_kiev.strftime('%H:%M')} (–ø–æ –ö–∏–µ–≤—É)")
    except Exception as e:
        print('–û—à–∏–±–∫–∞:', e)
    return matches

async def start(update: Update, context: CallbackContext):
    keyboard = [
        ['–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü 2000 –≥—Ä–∏–≤–µ–Ω', '–ö—É–ø–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑ 200 –≥—Ä–∏–≤–µ–Ω', '–ö—É–ø–∏—Ç—å –≠–∫—Å–ø—Ä–µ—Å—Å –∏–∑ 5 —Å–æ–±—ã—Ç–∏–π 400 –≥—Ä–∏–≤–µ–Ω'],
        ['–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', '–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI'],
        ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É']
    ]
    text = '–ü—Ä–∏–≤–µ—Ç!'
    if os.path.exists(WELCOME_TEXT_FILE):
        with open(WELCOME_TEXT_FILE, 'r', encoding='utf-8') as f:
            text = f.read()
    if os.path.exists(WELCOME_IMAGE_FILE):
        with open(WELCOME_IMAGE_FILE, 'rb') as img:
            await update.message.reply_photo(photo=InputFile(img), caption=text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    else:
        await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def set_welcome(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    text = update.message.text.replace('/set_welcome', '').strip()
    if not text:
        return await update.message.reply_text('–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.')
    with open(WELCOME_TEXT_FILE, 'w', encoding='utf-8') as f:
        f.write(text)
    await update.message.reply_text('–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω.')

async def save_welcome_image(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    await file.download_to_drive(WELCOME_IMAGE_FILE)
    await update.message.reply_text('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')

async def notify_user(bot, user_id: int, message: str):
    try:
        await bot.send_message(chat_id=user_id, text=message)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data
    admin_id = query.from_user.id
    bot = update.get_bot()

    if admin_id not in ADMIN_IDS:
        return

    if data.startswith("approve_subscription_"):
        uid = int(data.split("_")[-1])
        user_subscriptions[uid] = datetime.datetime.now() + datetime.timedelta(days=7)
        await notify_user(bot, uid, "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 7 –¥–Ω–µ–π!")
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π ‚úÖ")

    elif data.startswith("approve_prediction_"):
        uid = int(data.split("_")[-1])
        user_one_time[uid] = True
        await notify_user(bot, uid, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑!")
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω —Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ ‚úÖ")

    elif data.startswith("approve_express_"):
        uid = int(data.split("_")[-1])
        user_one_time_express[uid] = True
        await notify_user(bot, uid, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω —ç–∫—Å–ø—Ä–µ—Å—Å-–ø—Ä–æ–≥–Ω–æ–∑!")
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω —ç–∫—Å–ø—Ä–µ—Å—Å-–ø—Ä–æ–≥–Ω–æ–∑ ‚úÖ")

async def give_access(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        return
    args = update.message.text.split()
    if len(args) != 3:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /give user_id —Ç–∏–ø (days/one/express)")
    uid = int(args[1])
    typ = args[2]
    bot = update.get_bot()
    if typ == 'days':
        user_subscriptions[uid] = datetime.datetime.now() + datetime.timedelta(days=1)
        await notify_user(bot, uid, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –¥–µ–Ω—å!")
    elif typ == 'one':
        user_one_time[uid] = True
        await notify_user(bot, uid, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑!")
    elif typ == 'express':
        user_one_time_express[uid] = True
        await notify_user(bot, uid, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω —ç–∫—Å–ø—Ä–µ—Å—Å-–ø—Ä–æ–≥–Ω–æ–∑!")
    await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")


async def admin_panel(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        return
    buttons = [
        [InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')],
        [InlineKeyboardButton('üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='admin_users')],
        [InlineKeyboardButton('üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data='admin_history')],
        [InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"approve_subscription_{update.effective_user.id}")],
        [InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data=f"approve_prediction_{update.effective_user.id}")],
        [InlineKeyboardButton("–í—ã–¥–∞—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å", callback_data=f"approve_express_{update.effective_user.id}")]
        [InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='remove_sub')],
        [InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', callback_data='remove_one')],
        [InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å', callback_data='remove_express')]
    ]
        markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text
    uid = update.message.from_user.id
    now = datetime.datetime.now()
    exp = user_subscriptions.get(uid)

    if text == '/admin':
        return await admin_panel(update, context)

    if text == '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        payment_requests[uid] = 'sub'
        btn = InlineKeyboardMarkup([[InlineKeyboardButton('–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='paid')]])
        return await update.message.reply_text('–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É $ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=btn)

    if text == '–ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ $1':
        payment_requests[uid] = 'one'
        btn = InlineKeyboardMarkup([[InlineKeyboardButton('–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='paid')]])
        return await update.message.reply_text('–û–ø–ª–∞—Ç–∏—Ç–µ $1 –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.', reply_markup=btn)

    if text == '–ö—É–ø–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å –∑–∞ $1':
        payment_requests[uid] = 'express'
        btn = InlineKeyboardMarkup([[InlineKeyboardButton('–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='paid')]])
        return await update.message.reply_text('–û–ø–ª–∞—Ç–∏—Ç–µ $1 –∑–∞ —ç–∫—Å–ø—Ä–µ—Å—Å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.', reply_markup=btn)

    if text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑':
        if exp and exp > now or user_one_time.get(uid) is True:
            user_one_time[uid] = False
            return await update.message.reply_text(await generate_ai_prediction())
        return await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')

    if text == '–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI':
        if user_one_time_express.get(uid) is True:
            user_one_time_express[uid] = False
            return await update.message.reply_text(await generate_ai_express())
        return await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')

    if text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        if exp and exp > now:
            return await update.message.reply_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {exp.strftime("%Y-%m-%d")}')
        return await update.message.reply_text('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.')

async def handle_callback(update: Update, context: CallbackContext):
    q = update.callback_query
    uid = q.from_user.id
    await q.answer()

    if q.data == 'paid':
        req = payment_requests.get(uid)
        if not req:
            return await q.edit_message_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.')
        for aid in ADMIN_IDS:
            await context.bot.send_message(aid, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∫—É: {req}')
        return await q.edit_message_text('–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.')

    now = datetime.datetime.now()
    if q.data == 'admin_stats':
        total = len(user_subscriptions) + len(user_one_time) + len(user_one_time_express)
        subs = sum(1 for d in user_subscriptions.values() if d > now)
        one = sum(user_one_time.values())
        exp = sum(user_one_time_express.values())
        return await q.edit_message_text(f'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n‚úÖ –ü–æ–¥–ø–∏—Å–æ–∫: {subs}\nüé´ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤: {one}\n‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å–æ–≤: {exp}')

    if q.data == 'admin_users':
        lines = []
        for u in user_subscriptions:
            status = user_subscriptions[u].strftime('%Y-%m-%d')
            lines.append(f'{u}: –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {status}')
        for u in user_one_time:
            if user_one_time[u]: lines.append(f'{u}: —Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑')
        for u in user_one_time_express:
            if user_one_time_express[u]: lines.append(f'{u}: —Ä–∞–∑–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å')
        return await q.edit_message_text('\n'.join(lines) or '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

    if q.data == 'admin_history':
        lines = []
        for uid, entries in purchase_history.items():
            lines.append(f'{uid}: ' + ', '.join(entries))
        return await q.edit_message_text('\n'.join(lines) or '–ü–æ–∫—É–ø–æ–∫ –Ω–µ—Ç.')

    if q.data == 'give_sub':
        context.user_data['admin_action'] = 'give_sub'
        return await q.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö (–ø—Ä–∏–º–µ—Ä: 123456789 7)')

    if q.data == 'give_one':
        context.user_data['admin_action'] = 'give_one'
        return await q.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:')

    if q.data == 'give_express':
        context.user_data['admin_action'] = 'give_express'
        return await q.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ —ç–∫—Å–ø—Ä–µ—Å—Å–∞:')

    if q.data == 'remove_sub':
        context.user_data['admin_action'] = 'remove_sub'
        return await q.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:')

    if q.data == 'remove_one':
        context.user_data['admin_action'] = 'remove_one'
        return await q.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:')

    if q.data == 'remove_express':
        context.user_data['admin_action'] = 'remove_express'
        return await q.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Å–ø—Ä–µ—Å—Å–∞:')

async def generate_ai_prediction():
    matches = get_odds_matches()
    if not matches:
        return '–ù–µ—Ç –º–∞—Ç—á–µ–π —Å–µ–≥–æ–¥–Ω—è.'
    match = random.choice(matches)
    pred = random.choice(['–ü1','–ü2','–¢–ë 2.5','–¢–ú 2.5','–û–±–µ –∑–∞–±—å—é—Ç'])
    return f'üéØ –ú–∞—Ç—á: {match}\nüé≤ –ü—Ä–æ–≥–Ω–æ–∑: {pred}'

async def generate_ai_express():
    matches = get_odds_matches()
    if len(matches) < 5:
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π.'
    sel = random.sample(matches, 5)
    return '‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å:\n' + '\n'.join(f'{i+1}. {m}' for i, m in enumerate(sel))

async def process_admin_input(update: Update, context: CallbackContext):
    if 'admin_action' not in context.user_data:
        return
    action = context.user_data['admin_action']
    context.user_data['admin_action'] = None
    parts = update.message.text.strip().split()

    if action == 'give_sub' and len(parts) == 2:
        uid, days = int(parts[0]), int(parts[1])
        user_subscriptions[uid] = datetime.datetime.now() + datetime.timedelta(days=days)
        purchase_history.setdefault(uid, []).append(f'–ü–æ–¥–ø–∏—Å–∫–∞ {days}–¥')
        return await update.message.reply_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –Ω–∞ {days} –¥–Ω–µ–π.')

    if action == 'give_one' and len(parts) == 1:
        uid = int(parts[0])
        user_one_time[uid] = True
        purchase_history.setdefault(uid, []).append('–†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑')
        return await update.message.reply_text(f'–†–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.')

    if action == 'give_express' and len(parts) == 1:
        uid = int(parts[0])
        user_one_time_express[uid] = True
        purchase_history.setdefault(uid, []).append('–†–∞–∑–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å')
        return await update.message.reply_text(f'–†–∞–∑–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}.')

    if action == 'remove_sub' and len(parts) == 1:
        uid = int(parts[0])
        user_subscriptions.pop(uid, None)
        return await update.message.reply_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–¥–∞–ª–µ–Ω–∞.')

    if action == 'remove_one' and len(parts) == 1:
        uid = int(parts[0])
        user_one_time.pop(uid, None)
        return await update.message.reply_text(f'–ü—Ä–æ–≥–Ω–æ–∑ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–¥–∞–ª–µ–Ω.')

    if action == 'remove_express' and len(parts) == 1:
        uid = int(parts[0])
        user_one_time_express.pop(uid, None)
        return await update.message.reply_text(f'–≠–∫—Å–ø—Ä–µ—Å—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–¥–∞–ª–µ–Ω.')

async def route_messages(update: Update, context: CallbackContext):
    if 'admin_action' in context.user_data:
        await process_admin_input(update, context)
    else:
        await handle_text(update, context)

# ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
if __name__ == '__main__':
    app = ApplicationBuilder().token(os.getenv('YOUR_TELEGRAM_BOT_TOKEN')).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('admin', admin_panel))
    app.add_handler(CommandHandler('set_welcome', set_welcome))
    app.add_handler(CommandHandler('give', give_access))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route_messages))
    app.add_handler(MessageHandler(filters.PHOTO, save_welcome_image))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()


