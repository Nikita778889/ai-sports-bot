import os
import datetime
import random
import requests
import pytz
import asyncio
from deep_translator import GoogleTranslator
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler, filters

user_subscriptions = {}
user_spin_status = {}
SUBSCRIPTIONS = {
    'week': 7,
    '2weeks': 14,
    'month': 30,
}

API_KEY = "1b3004c7259586cf921ab379bc84fd7a"
API_URL = "https://v3.football.api-sports.io/fixtures?date={date}"
HEADERS = {"x-apisports-key": API_KEY}

LUCK_CHECK_INTERVAL = datetime.timedelta(hours=48)


def translate_to_english(text):
    try:
        return GoogleTranslator(source='auto', target='en').translate(text)
    except:
        return text

def get_today_matches():
    tz = pytz.timezone("Europe/Kiev")
    now = datetime.datetime.now(tz)
    today = now.date().isoformat()
    response = requests.get(API_URL.format(date=today), headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        matches = []
        for fixture in data.get("response", []):
            match_time_utc = datetime.datetime.fromisoformat(fixture["fixture"]["date"].replace("Z", "+00:00"))
            match_time_kiev = match_time_utc.astimezone(tz)
            if match_time_kiev > now:
                teams = fixture["teams"]
                time_str = match_time_kiev.strftime('%H:%M')
                matches.append(f"{teams['home']['name']} vs {teams['away']['name']} –≤ {time_str} (–ø–æ –ö–∏–µ–≤—É)")
        return matches
    return []

def find_match_by_name(name):
    name = translate_to_english(name)
    tz = pytz.timezone("Europe/Kiev")
    now = datetime.datetime.now(tz)
    today = now.date().isoformat()
    response = requests.get(API_URL.format(date=today), headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        for fixture in data.get("response", []):
            home = fixture["teams"]["home"]["name"].lower()
            away = fixture["teams"]["away"]["name"].lower()
            full_name = f"{home} vs {away}"
            if name.lower() in full_name:
                match_time_utc = datetime.datetime.fromisoformat(fixture["fixture"]["date"].replace("Z", "+00:00"))
                match_time_kiev = match_time_utc.astimezone(tz)
                time_str = match_time_kiev.strftime('%H:%M')
                return f"{fixture['teams']['home']['name']} vs {fixture['teams']['away']['name']} –≤ {time_str} (–ø–æ –ö–∏–µ–≤—É)"
    return None

async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_menu")],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="get_prediction")],
        [InlineKeyboardButton("–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI", callback_data="get_express")],
        [InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É", callback_data="match_prompt")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É üéÅ", callback_data="check_luck")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI Sports Bot. –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á–∏ –∏ –¥–∞—é –ª—É—á—à–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def check_luck(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    now = datetime.datetime.now()
    last_try = user_spin_status.get(user_id, {}).get("last_luck")
    paid_try = user_spin_status.get(user_id, {}).get("paid")

    is_free_try = not last_try or (now - last_try >= LUCK_CHECK_INTERVAL)

    if is_free_try:
        # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 5 —è—á–µ–µ–∫, 1 –≤—ã–∏–≥—Ä—ã—à
        grid = ["‚ùå"] * 5
        win_index = random.randint(0, 4)
        grid[win_index] = "üéâ"
        message = "üé≤ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: –≤ –æ–¥–Ω–æ–π –∏–∑ 5 —è—á–µ–µ–∫ —Å–ø—Ä—è—Ç–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑."
        message += "\n\n" + " ".join(grid)
        if grid[win_index] == "üéâ":
            user_spin_status[user_id] = {"last_luck": now}
            await query.message.reply_text(message + "\n\nüéÅ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑!")
        else:
            user_spin_status[user_id] = {"last_luck": now}
            await query.message.reply_text(message + "\n\n–£–≤—ã, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∑–∞ 5$? –í –ø–ª–∞—Ç–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ 3 —è—á–µ–π–∫–∏, —à–∞–Ω—Å –≤—ã—à–µ!")
    else:
        # –ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 3 —è—á–µ–π–∫–∏, 1 –≤—ã–∏–≥—Ä—ã—à
        grid = ["‚ùå"] * 3
        win_index = random.randint(0, 2)
        grid[win_index] = "üéÅ"
        message = "üí∏ –ü–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞ 5$: –≤—ã–∏–≥—Ä—ã—à –≤ –æ–¥–Ω–æ–π –∏–∑ 3 —è—á–µ–µ–∫."
        message += "\n\n" + " ".join(grid)
        if grid[win_index] == "üéÅ":
            await query.message.reply_text(message + "\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1 –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥–Ω–æ–∑–∞–º!")
        else:
            await query.message.reply_text(message + "\n\nüòî –ù–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")

if __name__ == '__main__':
    TOKEN = os.getenv("YOUR_TELEGRAM_BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_luck, pattern="^check_luck$"))
    app.run_polling()
