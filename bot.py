import os
import datetime
import random
import requests
import pytz
from deep_translator import GoogleTranslator
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler, filters

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_subscriptions = {}
user_one_time = {}
user_one_time_express = {}
banned_users = set()

SUBSCRIPTIONS = {
    'week': 7,
    '2weeks': 14,
    'month': 30,
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OddsAPI
ODDS_API_KEY = os.getenv('ODDS_API_KEY', 'd0b434508c21688f0655d4eef265b4c5')
SPORT_KEY = 'soccer'

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_IDS = {553253995}  # –≤–∞—à Telegram ID

def translate_to_english(text):
    try:
        return GoogleTranslator(source='auto', target='en').translate(text)
    except Exception:
        return text

def get_odds_matches():
    matches = []
    tz = pytz.timezone('Europe/Kiev')
    now = datetime.datetime.now(tz)
    url = (
        f'https://api.the-odds-api.com/v4/sports/{SPORT_KEY}/odds'
        f'?apiKey={ODDS_API_KEY}&regions=eu&markets=h2h&oddsFormat=decimal'
    )
    try:
        response = requests.get(url)
        if response.status_code == 200:
            for m in response.json():
                home, away = m['home_team'], m['away_team']
                ct = datetime.datetime.fromisoformat(m['commence_time'].replace('Z', '+00:00'))
                ct_kiev = ct.astimezone(tz)
                if ct_kiev > now:
                    matches.append(f"{home} vs {away} –≤ {ct_kiev.strftime('%H:%M')} (–ø–æ –ö–∏–µ–≤—É)")
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OddsAPI: {e}')
    return matches

async def start(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid in banned_users:
        return
    keyboard = [
        ['–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', '–ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ $1', '–ö—É–ø–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å –∑–∞ $1'],
        ['–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', '–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI'],
        ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É']
    ]
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø AI Sports Bot. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –ê–¥–º–∏–Ω: –ø–∞–Ω–µ–ª—å –∏ –∫–æ–º–∞–Ω–¥—ã
async def admin_panel(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        return
    buttons = [
        [InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')],
        [InlineKeyboardButton('üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='admin_users')],
        [InlineKeyboardButton('üö´ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö', callback_data='admin_banned')]
    ]
    await update.message.reply_text('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup=InlineKeyboardMarkup(buttons))

async def list_users(update: Update, context: CallbackContext):
    lines = ['‚Äî –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏ –ø–æ–∫—É–ø–∫–∏:']
    now = datetime.datetime.now()
    for uid, exp in user_subscriptions.items():
        status = f'–ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {exp.strftime('%Y-%m-%d')}' if exp > now else '–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞'
        lines.append(f'{uid}: {status}')
    for uid, flag in user_one_time.items():
        if flag:
            lines.append(f'{uid}: –∫—É–ø–∏–ª —Ä–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑')
    for uid, flag in user_one_time_express.items():
        if flag:
            lines.append(f'{uid}: –∫—É–ø–∏–ª —Ä–∞–∑–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å')
    text = '\n'.join(lines) if lines else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'
    await update.callback_query.edit_message_text(text)

async def list_banned(update: Update, context: CallbackContext):
    text = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n' + '\n'.join(str(uid) for uid in banned_users) if banned_users else '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.'
    await update.callback_query.edit_message_text(text)

async def ban_user(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        return
    args = context.args
    if not args:
        return await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>')
    target = int(args[0])
    banned_users.add(target)
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')

async def unban_user(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        return
    args = context.args
    if not args:
        return await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>')
    target = int(args[0])
    banned_users.discard(target)
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async def generate_ai_prediction():
    matches = get_odds_matches()
    if not matches:
        return '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–∞—Ç—á–µ–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API.'
    match = random.choice(matches)
    pred = random.choice(['–ü1','–ü2','–¢–ë 2.5','–¢–ú 2.5','–û–±–µ –∑–∞–±—å—é—Ç'])
    return f'üéØ –ú–∞—Ç—á: {match}\nüé≤ –ü—Ä–æ–≥–Ω–æ–∑: {pred}'

async def generate_ai_express():
    matches = get_odds_matches()
    if len(matches) < 5:
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å–∞.'
    sel = random.sample(matches, 5)
    resp = '‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI:\n'
    for i, m in enumerate(sel,1): resp+=f'{i}. {m}\n'
    return resp

async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text
    uid = update.message.from_user.id
    if uid in banned_users:
        return
    now = datetime.datetime.now()
    exp = user_subscriptions.get(uid)

    if text == '/admin':
        return await admin_panel(update, context)

    if text.startswith('/ban') or text.startswith('/unban'):
        return

    if text == '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        kb=[[InlineKeyboardButton('1 –Ω–µ–¥–µ–ª—è',callback_data='buy_week'),InlineKeyboardButton('2 –Ω–µ–¥–µ–ª–∏',callback_data='buy_2weeks'),InlineKeyboardButton('–ú–µ—Å—è—Ü',callback_data='buy_month')]]
        return await update.message.reply_text('–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:',reply_markup=InlineKeyboardMarkup(kb))

    if text == '–ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ $1':
        user_one_time[uid]=True
        await update.message.reply_text('–ö—É–ø–ª–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑. –ù–∞–∂–º–∏—Ç–µ ‚Äû–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑‚Äú')
        for aid in ADMIN_IDS: await context.bot.send_message(aid,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∫—É–ø–∏–ª –ø—Ä–æ–≥–Ω–æ–∑')
        return

    if text == '–ö—É–ø–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å –∑–∞ $1':
        user_one_time_express[uid]=True
        await update.message.reply_text('–ö—É–ø–ª–µ–Ω —ç–∫—Å–ø—Ä–µ—Å—Å. –ù–∞–∂–º–∏—Ç–µ ‚Äû–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI‚Äú')
        for aid in ADMIN_IDS: await context.bot.send_message(aid,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∫—É–ø–∏–ª —ç–∫—Å–ø—Ä–µ—Å—Å')
        return

    if text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑':
        if (exp and exp>now) or user_one_time.get(uid,False):
            res=await generate_ai_prediction(); user_one_time[uid]=False
            return await update.message.reply_text(res)
        return await update.message.reply_text('–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑')

    if text == '–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI':
        if user_one_time_express.get(uid,False):
            res=await generate_ai_express(); user_one_time_express[uid]=False
            return await update.message.reply_text(res)
        return await update.message.reply_text('–ö—É–ø–∏—Ç–µ —ç–∫—Å–ø—Ä–µ—Å—Å')

    if text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        if exp and exp>now: return await update.message.reply_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {exp.strftime("%Y-%m-%d")}')
        return await update.message.reply_text('–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏')

async def handle_callback(update: Update, context: CallbackContext):
    q=update.callback_query;await q.answer();uid=q.from_user.id;now=datetime.datetime.now()
    data=q.data
    if data=='admin_stats':
        total=len(set(user_subscriptions)|set(user_one_time)|set(user_one_time_express))
        subs=sum(d>now for d in user_subscriptions.values())
        one=sum(user_one_time.values())
        ex=sum(user_one_time_express.values())
        return await q.edit_message_text(f'üë•:{total}\n‚úÖ:{subs}\nüé´:{one}\n‚ö°:{ex}')
    if data=='admin_users': return await list_users(update,context)
    if data=='admin_banned': return await list_banned(update,context)
    if data.startswith('buy_'):
        days=7 if data=='buy_week' else 14 if data=='buy_2weeks' else 30
        user_subscriptions[uid]=now+datetime.timedelta(days=days)
        for aid in ADMIN_IDS: await context.bot.send_message(aid,f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π')
        return await q.edit_message_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ')

if __name__=='__main__':
    app=ApplicationBuilder().token(os.getenv('YOUR_TELEGRAM_BOT_TOKEN')).build()
    app.add_handler(CommandHandler('start',start))
    app.add_handler(CommandHandler('admin',admin_panel))
    app.add_handler(CommandHandler('ban',ban_user))
    app.add_handler(CommandHandler('unban',unban_user))
    app.add_handler(CommandHandler('revoke_sub',revoke_subscription))
    app.add_handler(CommandHandler('revoke_one',revoke_one_time))
    app.add_handler(CommandHandler('revoke_express',revoke_one_express))
    app.add_handler(MessageHandler(filters.TEXT&~filters.COMMAND,handle_text))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()
