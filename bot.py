import os
import datetime
import random
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler

user_subscriptions = {}
SUBSCRIPTIONS = {
    'week': 7,
    '2weeks': 14,
    'month': 30,
}

API_KEY = "1b3004c7259586cf921ab379bc84fd7a"
API_URL = "https://v3.football.api-sports.io/fixtures?date={date}"
HEADERS = {
    "x-apisports-key": API_KEY
}

def get_today_matches():
    today = datetime.date.today().isoformat()
    response = requests.get(API_URL.format(date=today), headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        matches = []
        for fixture in data.get("response", [])[:10]:
            teams = fixture["teams"]
            match_str = f"{teams['home']['name']} vs {teams['away']['name']}"
            matches.append(match_str)
        return matches
    return []

async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy')],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data='bet')],
        [InlineKeyboardButton("–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI", callback_data='express')],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='status')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI Sports Bot. –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á–∏ –∏ –¥–∞—é –ª—É—á—à–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def generate_ai_prediction():
    matches = get_today_matches()
    if not matches:
        return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–∞—Ç—á–µ–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API."
    match = random.choice(matches)
    options = ["–ü1", "–ü2", "–¢–ë 2.5", "–¢–ú 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"]
    prediction = random.choice(options)
    comment = "AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ñ–æ—Ä–º—É –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–±—Ä–∞–ª –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥."
    return f"üèü –ú–∞—Ç—á: {match}\nüéØ –ü—Ä–æ–≥–Ω–æ–∑: {prediction}\nü§ñ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

async def generate_ai_express():
    matches = get_today_matches()
    if len(matches) < 5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å–∞."
    selected = random.sample(matches, 5)
    total_koef = 1
    response = "‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI:\n"
    for i, match in enumerate(selected, 1):
        pred = random.choice(["–ü1", "–ü2", "–¢–ë 2.5", "–¢–ú 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"])
        koef = round(random.uniform(1.3, 2.1), 2)
        total_koef *= koef
        response += f"{i}. {match} ‚Äî {pred} (–∫–æ—ç—Ñ. {koef})\n"
    response += f"\nüí∞ –û–±—â–∏–π –∫–æ—ç—Ñ: {round(total_koef, 2)}"
    return response

async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == 'buy':
        keyboard = [
            [InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data='sub_week')],
            [InlineKeyboardButton("2 –Ω–µ–¥–µ–ª–∏", callback_data='sub_2weeks')],
            [InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data='sub_month')]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('sub_'):
        plan = query.data.replace('sub_', '')
        days = SUBSCRIPTIONS[plan]
        expiry = datetime.datetime.now() + datetime.timedelta(days=days)
        user_subscriptions[user_id] = expiry
        await query.edit_message_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π, –¥–æ {expiry.strftime('%Y-%m-%d')}.")

    elif query.data == 'status':
        expiry = user_subscriptions.get(user_id)
        if expiry and expiry > datetime.datetime.now():
            await query.edit_message_text(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry.strftime('%Y-%m-%d')}.")
        else:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

    elif query.data == 'bet':
        expiry = user_subscriptions.get(user_id)
        if expiry and expiry > datetime.datetime.now():
            prediction = await generate_ai_prediction()
            await query.edit_message_text(prediction)
        else:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")

    elif query.data == 'express':
        expiry = user_subscriptions.get(user_id)
        if expiry and expiry > datetime.datetime.now():
            express = await generate_ai_express()
            await query.edit_message_text(express)
        else:
            await query.edit_message_text("–≠–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

if __name__ == '__main__':
    TOKEN = os.getenv("YOUR_TELEGRAM_BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()
