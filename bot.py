import os
import datetime
import random
import requests
import pytz
from deep_translator import GoogleTranslator
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler, filters

user_subscriptions = {}
SUBSCRIPTIONS = {
    'week': 7,
    '2weeks': 14,
    'month': 30,
}

user_luck = {}
LUCK_INTERVAL = datetime.timedelta(hours=48)

API_KEY = "1b3004c7259586cf921ab379bc84fd7a"
API_URL = "https://v3.football.api-sports.io/fixtures?date={date}"
HEADERS = {
    "x-apisports-key": API_KEY
}

def translate_to_english(text):
    try:
        return GoogleTranslator(source='auto', target='en').translate(text)
    except:
        return text

def get_today_matches():
    tz = pytz.timezone("Europe/Kiev")
    now = datetime.datetime.now(tz)
    today = now.date().isoformat()
    response = requests.get(API_URL.format(date=today), headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        matches = []
        for fixture in data.get("response", []):
            match_time_utc = datetime.datetime.fromisoformat(fixture["fixture"]["date"].replace("Z", "+00:00"))
            match_time_kiev = match_time_utc.astimezone(tz)

            if match_time_kiev > now:
                teams = fixture["teams"]
                time_str = match_time_kiev.strftime('%H:%M')
                match_str = f"{teams['home']['name']} vs {teams['away']['name']} –≤ {time_str} (–ø–æ –ö–∏–µ–≤—É)"
                matches.append(match_str)
        return matches
    return []

def find_match_by_name(name):
    name = translate_to_english(name)
    tz = pytz.timezone("Europe/Kiev")
    now = datetime.datetime.now(tz)
    today = now.date().isoformat()
    response = requests.get(API_URL.format(date=today), headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        for fixture in data.get("response", []):
            home = fixture["teams"]["home"]["name"].lower()
            away = fixture["teams"]["away"]["name"].lower()
            full_name = f"{home} vs {away}"
            if name.lower() in full_name:
                match_time_utc = datetime.datetime.fromisoformat(fixture["fixture"]["date"].replace("Z", "+00:00"))
                match_time_kiev = match_time_utc.astimezone(tz)
                time_str = match_time_kiev.strftime('%H:%M')
                match_str = f"{fixture['teams']['home']['name']} vs {fixture['teams']['away']['name']} –≤ {time_str} (–ø–æ –ö–∏–µ–≤—É)"
                return match_str
    return None

async def start(update: Update, context: CallbackContext):
    keyboard = [[
        KeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        KeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"),
        KeyboardButton("–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI")
    ], [
        KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É"),
        KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É")
    ]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI Sports Bot. –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á–∏ –∏ –¥–∞—é –ª—É—á—à–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def generate_ai_prediction():
    matches = get_today_matches()
    if not matches:
        return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–∞—Ç—á–µ–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API."
    match = random.choice(matches)
    options = ["–ü1", "–ü2", "–¢–ë 2.5", "–¢–ú 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"]
    prediction = random.choice(options)
    comment = "AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ñ–æ—Ä–º—É –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–±—Ä–∞–ª –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥."
    return f"\U0001F3DF –ú–∞—Ç—á: {match}\n\U0001F3AF –ü—Ä–æ–≥–Ω–æ–∑: {prediction}\n\U0001F916 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

async def generate_ai_express():
    matches = get_today_matches()
    if len(matches) < 5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å–∞."
    selected = random.sample(matches, 5)
    total_koef = 1
    response = "‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI:\n"
    for i, match in enumerate(selected, 1):
        pred = random.choice(["–ü1", "–ü2", "–¢–ë 2.5", "–¢–ú 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"])
        koef = round(random.uniform(1.3, 2.1), 2)
        total_koef *= koef
        response += f"{i}. {match} ‚Äî {pred} (–∫–æ—ç—Ñ. {koef})\n"
    response += f"\n\U0001F4B0 –û–±—â–∏–π –∫–æ—ç—Ñ: {round(total_koef, 2)}"
    return response

async def show_luck_cells(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    now = datetime.datetime.now()
    last_try = user_luck.get(user_id, {}).get("last")
    is_free_try = not last_try or (now - last_try >= LUCK_INTERVAL)

    cell_count = 5 if is_free_try else 3
    context.user_data['luck_game'] = {
        'win_index': random.randint(0, cell_count - 1),
        'free': is_free_try
    }

    buttons = [InlineKeyboardButton(str(i + 1), callback_data=f"cell_{i}") for i in range(cell_count)]
    markup = InlineKeyboardMarkup.from_row(buttons)

    intro_text = "üé≤ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (—Ä–∞–∑ –≤ 48 —á–∞—Å–æ–≤): –æ–¥–Ω–∞ –∏–∑ 5 —è—á–µ–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –í—ã–±–µ—Ä–∏ —è—á–µ–π–∫—É:" if is_free_try \
        else "üí∏ –ü–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞ 5$: –æ–¥–Ω–∞ –∏–∑ 3 —è—á–µ–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞. –í—ã–±–µ—Ä–∏ —è—á–µ–π–∫—É:"

    await query.message.reply_text(intro_text, reply_markup=markup)
    user_luck[user_id] = {'last': now} if is_free_try else user_luck.get(user_id, {})

async def handle_luck_cell(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    game = context.user_data.get('luck_game')
    if not game:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    selected = int(query.data.split('_')[1])
    win = selected == game['win_index']

    if win:
        prediction = await generate_ai_prediction()
        reward_text = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑!" if game['free'] else "üéâ –ü–æ–±–µ–¥–∞! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞."
        await query.message.reply_text(f"{reward_text}\n{prediction}")
    else:
        fail_text = "üòî –£–≤—ã, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∑–∞ 5$? –í –ø–ª–∞—Ç–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ 3 —è—á–µ–π–∫–∏ ‚Äî —à–∞–Ω—Å –≤—ã—à–µ!" if game['free'] \
            else "üòî –ù–µ—É–¥–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
        await query.message.reply_text(fail_text)

    context.user_data['luck_game'] = None

async def handle_callback(update: Update, context: CallbackContext):
    data = update.callback_query.data
    if data.startswith("buy_"):
        await handle_subscription_choice(update, context)
    elif data == "check_luck":
        await show_luck_cells(update, context)
    elif data.startswith("cell_"):
        await handle_luck_cell(update, context)

async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.message.from_user.id

    if context.user_data.get('awaiting_match'):
        context.user_data['awaiting_match'] = False
        match_name = text
        found = find_match_by_name(match_name)
        if found:
            prediction = random.choice(["–ü1", "–ü2", "–¢–ë 2.5", "–¢–ú 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"])
            comment = "AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–±—Ä–∞–ª –ª—É—á—à–∏–π –∏—Å—Ö–æ–¥."
            await update.message.reply_text(f"\U0001F3DF –ú–∞—Ç—á: {found}\n\U0001F3AF –ü—Ä–æ–≥–Ω–æ–∑: {prediction}\n\U0001F916 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        else:
            await update.message.reply_text("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return

    expiry = user_subscriptions.get(user_id)
    if text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        keyboard = [
            [InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data='buy_week'),
             InlineKeyboardButton("2 –Ω–µ–¥–µ–ª–∏", callback_data='buy_2weeks'),
             InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data='buy_month')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup)

    elif text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑":
        if expiry and expiry > datetime.datetime.now():
            prediction = await generate_ai_prediction()
            await update.message.reply_text(prediction)
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")

    elif text == "–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI":
        if expiry and expiry > datetime.datetime.now():
            express = await generate_ai_express()
            await update.message.reply_text(express)
        else:
            await update.message.reply_text("–≠–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

    elif text == "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É":
        if expiry and expiry > datetime.datetime.now():
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2':")
            context.user_data['awaiting_match'] = True
        else:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

    elif text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        if expiry and expiry > datetime.datetime.now():
            await update.message.reply_text(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry.strftime('%Y-%m-%d')}.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

    elif text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É":
        keyboard = [[InlineKeyboardButton("üéÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É", callback_data="check_luck")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üéÅ –•–æ—á–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)

async def handle_subscription_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    now = datetime.datetime.now()

    if query.data == "buy_week":
        user_subscriptions[user_id] = now + datetime.timedelta(days=7)
        await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ")
    elif query.data == "buy_2weeks":
        user_subscriptions[user_id] = now + datetime.timedelta(days=14)
        await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ")
    elif query.data == "buy_month":
        user_subscriptions[user_id] = now + datetime.timedelta(days=30)
        await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ")

if __name__ == '__main__':
    TOKEN = os.getenv("YOUR_TELEGRAM_BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()
