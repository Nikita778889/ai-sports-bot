import os
import datetime
import random
import requests
import pytz
from deep_translator import GoogleTranslator
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler, filters

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_subscriptions = {}
user_one_time = {}
user_one_time_express = {}
SUBSCRIPTIONS = {
    'week': 7,
    '2weeks': 14,
    'month': 30,
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OddsAPI
ODDS_API_KEY = os.getenv('ODDS_API_KEY', 'd0b434508c21688f0655d4eef265b4c5')
SPORT_KEY = 'soccer'

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ADMIN_IDS = set(int(i) for i in os.getenv('ADMIN_IDS', '').split(',') if i)

def translate_to_english(text):
    try:
        return GoogleTranslator(source='auto', target='en').translate(text)
    except:
        return text

def get_odds_matches():
    matches = []
    tz = pytz.timezone('Europe/Kiev')
    now = datetime.datetime.now(tz)
    url = (
        f'https://api.the-odds-api.com/v4/sports/{SPORT_KEY}/odds'
        f'?apiKey={ODDS_API_KEY}&regions=eu&markets=h2h&oddsFormat=decimal'
    )
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            for match in data:
                home = match['home_team']
                away = match['away_team']
                commence_time = datetime.datetime.fromisoformat(match['commence_time'].replace('Z', '+00:00'))
                commence_kiev = commence_time.astimezone(tz)
                if commence_kiev > now:
                    time_str = commence_kiev.strftime('%H:%M')
                    matches.append(f'{home} vs {away} –≤ {time_str} (–ø–æ –ö–∏–µ–≤—É)')
        else:
            print(f'–û—à–∏–±–∫–∞ API: {response.status_code} ‚Äî {response.text}')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OddsAPI: {e}')
    return matches

async def start(update: Update, context: CallbackContext):
    keyboard = [
        ['–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', '–ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ $1', '–ö—É–ø–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å –∑–∞ $1'],
        ['–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', '–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI'],
        ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø AI Sports Bot. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def admin_panel(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
        return
    keyboard = [[InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')]]
    await update.message.reply_text('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup=InlineKeyboardMarkup(keyboard))

async def generate_ai_prediction():
    matches = get_odds_matches()
    if not matches:
        return '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –º–∞—Ç—á–µ–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API.'
    match = random.choice(matches)
    pred = random.choice(['–ü1','–ü2','–¢–ë 2.5','–¢–ú 2.5','–û–±–µ –∑–∞–±—å—é—Ç'])
    return f'üéØ –ú–∞—Ç—á: {match}\nüé≤ –ü—Ä–æ–≥–Ω–æ–∑: {pred}'

async def generate_ai_express():
    matches = get_odds_matches()
    if len(matches) < 5:
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å–∞.'
    selected = random.sample(matches, 5)
    response = '‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI:\n'
    for i, m in enumerate(selected,1):
        pred = random.choice(['–ü1','–ü2','–¢–ë 2.5','–¢–ú 2.5','–û–±–µ –∑–∞–±—å—é—Ç'])
        response += f'{i}. {m} ‚Äî {pred}\n'
    return response

async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.message.from_user.id
    now = datetime.datetime.now()
    expiry = user_subscriptions.get(user_id)

    if text == '/admin':
        return await admin_panel(update, context)

    if text == '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        kb = [[InlineKeyboardButton('1 –Ω–µ–¥–µ–ª—è',callback_data='buy_week'),InlineKeyboardButton('2 –Ω–µ–¥–µ–ª–∏',callback_data='buy_2weeks'),InlineKeyboardButton('–ú–µ—Å—è—Ü',callback_data='buy_month')]]
        return await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=InlineKeyboardMarkup(kb))

    if text == '–ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ $1':
        user_one_time[user_id] = True
        return await update.message.reply_text('–ö—É–ø–ª–µ–Ω –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑".')

    if text == '–ö—É–ø–∏—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å –∑–∞ $1':
        user_one_time_express[user_id] = True
        return await update.message.reply_text('–ö—É–ø–ª–µ–Ω –æ–¥–∏–Ω —ç–∫—Å–ø—Ä–µ—Å—Å. –ù–∞–∂–º–∏—Ç–µ "–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI".')

    if text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑':
        if (expiry and expiry>now) or user_one_time.get(user_id,False):
            resp = await generate_ai_prediction()
            if user_one_time.get(user_id): user_one_time[user_id]=False
            return await update.message.reply_text(resp)
        return await update.message.reply_text('–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ $1.')

    if text == '–≠–∫—Å–ø—Ä–µ—Å—Å –æ—Ç AI':
        if user_one_time_express.get(user_id,False):
            resp = await generate_ai_express()
            user_one_time_express[user_id]=False
            return await update.message.reply_text(resp)
        return await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ —ç–∫—Å–ø—Ä–µ—Å—Å –∑–∞ $1.')

    if text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É':
        if expiry and expiry>now:
            return await update.message.reply_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry.strftime("%Y-%m-%d")}')
        return await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.')

async def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    now = datetime.datetime.now()

    if query.data == 'admin_stats':
        total_users = len(set(list(user_subscriptions.keys())+list(user_one_time.keys())+list(user_one_time_express.keys())))
        active_subs = sum(1 for d in user_subscriptions.values() if d>now)
        one_time = sum(1 for v in user_one_time.values() if v)
        one_express = sum(1 for v in user_one_time_express.values() if v)
        text = f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}\nüé´ –†–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã: {one_time}\n‚ö° –†–∞–∑–æ–≤—ã–µ —ç–∫—Å–ø—Ä–µ—Å—Å—ã: {one_express}'
        return await query.edit_message_text(text)

    # –ø–æ–¥–ø–∏—Å–∫–∏
    if query.data.startswith('buy_'):
        if query.data=='buy_week': delta=7
        elif query.data=='buy_2weeks': delta=14
        else: delta=30
        user_subscriptions[user_id]=now+datetime.timedelta(days=delta)
        return await query.edit_message_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {delta} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ')

if __name__=='__main__':
    TOKEN=os.getenv('YOUR_TELEGRAM_BOT_TOKEN')
    app=ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('admin', admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()
